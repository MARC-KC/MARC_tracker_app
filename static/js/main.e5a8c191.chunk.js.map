{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","posts","setPosts","fetchData","a","axios","get","data","console","log","useEffect","Missouri","filter","post","Jurisdiction","sort","b","Date","map","RegimenCompleted_Count","Kansas","maxMO","Math","max","maxKS","className","length","style","marginBottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAqGeA,EA3DH,WAAM,MAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,KAKVC,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,IAAMC,IARjB,2DAOI,gBACRC,EADQ,EACRA,KACRC,QAAQC,IAAIF,GACZL,EAASK,GAHO,2CAAH,qDAQfG,qBAAU,WACRP,MACC,IAEH,IAAMQ,EAAWV,EACdW,QAAO,SAAAC,GAAI,MAA0B,aAAtBA,EAAKC,gBACpBC,MAAK,SAACX,EAAGY,GAAJ,OAAUZ,EAAEa,KAAOD,EAAEC,QAE1BC,KAAI,SAACL,GAAD,OAAUA,EAAKM,0BAEhBC,EAASnB,EACZW,QAAO,SAAAC,GAAI,MAA0B,WAAtBA,EAAKC,gBACpBC,MAAK,SAACX,EAAGY,GAAJ,OAAUZ,EAAEa,KAAOD,EAAEC,QAC1BC,KAAI,SAACL,GAAD,OAAUA,EAAKM,0BAEhBE,EAAQC,KAAKC,IAAL,MAAAD,KAAI,YAAQX,IACpBa,EAAQF,KAAKC,IAAL,MAAAD,KAAI,YAAQF,IAE1B,OACE,qBAAKK,UAAU,UAAf,SACGxB,EAAMyB,OAAS,EACd,sBAAKD,UAAU,UAAf,UACE,iDAAoBH,KAAKC,IAAL,MAAAD,KAAI,YAAQX,OAChC,+CAAkBW,KAAKC,IAAL,MAAAD,KAAI,YAAQF,OAC9B,0CAAaC,EAAQG,KACpBvB,EACEW,QAAO,SAAAC,GAAI,MAA0B,aAAtBA,EAAKC,cAAqD,WAAtBD,EAAKC,gBACxDC,MAAK,SAACX,EAAGY,GAAJ,OAAUZ,EAAEa,KAAOD,EAAEC,QAE1BC,KAAI,SAACL,GAAD,OACH,sBAAKY,UAAU,OAAf,UACE,wBAAOE,MAAO,CAAEC,aAAc,GAA9B,UAAoCf,EAAKC,aAAzC,SACA,kCAAQD,EAAKI,KAAb,SACA,gCAAQJ,EAAKM,kCAMrB,mBAAGM,UAAU,UAAb,4BClFOI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e5a8c191.chunk.js","sourcesContent":["/*\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\n\n// The REST API endpoint\n//const API_URL = 'https://gis2.marc2.org/marcdataapi/api/covidvaccination';\n// https://official-joke-api.appspot.com/random_joke\n\nconst App = () => {\n  const [joke, setJoke] = useState(\"\");\n\n  const getJoke = () => {\n    axios.get(\"https://gis2.marc2.org/marcdataapi/api/covidvaccination\").then(\n      (response) => {\n        console.log(response);\n        //setJoke(\"<h1>\" + response.data);\n      }\n    );\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <button onClick={getJoke}>get joke</button>\n      <div dangerouslySetInnerHTML={{ __html: joke }} />\n    </div>\n  );\n};\n\nexport default App;\n*/\n\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\n\n// The REST API endpoint\nconst API_URL = 'https://gis2.marc2.org/marcdataapi/api/covidvaccination';\n\nconst App = () => {\n  // At the beginning, posts is an empty array\n  const [posts, setPosts] = useState([]);\n\n  // Define the function that fetches the data from API\n  const fetchData = async () => {\n    const { data } = await axios.get(API_URL);\n    console.log(data);\n    setPosts(data);\n  };\n\n\n  // Trigger the fetchData after the initial render by using the useEffect hook\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const Missouri = posts\n    .filter(post => post.Jurisdiction === 'Missouri')\n    .sort((a, b) => a.Date - b.Date)\n    //.slice(-1)\n    .map((post) => post.RegimenCompleted_Count);\n\n  const Kansas = posts\n    .filter(post => post.Jurisdiction === 'Kansas')\n    .sort((a, b) => a.Date - b.Date)\n    .map((post) => post.RegimenCompleted_Count);\n\n  const maxMO = Math.max(...Missouri)\n  const maxKS = Math.max(...Kansas)\n\n  return (\n    <div className=\"wrapper\">\n      {posts.length > 0 ? (\n        <div className=\"content\">\n          <p>Total Missouri: {Math.max(...Missouri)}</p>\n          <p>Total Kansas: {Math.max(...Kansas)}</p>\n          <h1> Total: {maxMO + maxKS}</h1>\n          {posts\n            .filter(post => post.Jurisdiction === 'Missouri' || post.Jurisdiction === 'Kansas')\n            .sort((a, b) => a.Date - b.Date)\n            //.slice(-1)\n            .map((post) => (\n              <div className=\"post\">\n                <small style={{ marginBottom: 0 }}>{post.Jurisdiction} | </small>\n                <small>{post.Date} | </small>\n                <small>{post.RegimenCompleted_Count}</small>\n              </div>\n            ))\n          }\n        </div>\n      ) : (\n        <p className=\"loading\">Loading... </p>\n      )\n      }\n    </div >\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}